#!/usr/bin/env python3

# stdlib
import datetime
import os
import sys
import time
from distutils.util import strtobool

# local
import lib.commands
import lib.environment


# =============================================================================
# constants
# =============================================================================
DEBUG = 'DEBUG'
ERROR_ON_NO_CHANGES = 'ERROR_ON_NO_CHANGES'
TERRAFORM_SOURCE_DIR = 'TF_WORKING_DIR'
TERRAFORM_DIR_PATH = 'TF_DIR_PATH'
TERRAFORM_OUTPUT_DIR = 'TF_OUTPUT_DIR'
ARCHIVE_OUTPUT_DIR = 'ARCHIVE_OUTPUT_DIR'
ARCHIVE_INPUT_DIR = 'ARCHIVE_INPUT_DIR'
SOURCE_REF = 'SOURCE_REF'
SOURCE_REF_FILE = 'SOURCE_REF_FILE'
PLAN_FILE_PATH = 'PLAN_FILE_PATH'
DESTROY = 'DESTROY'
STATE_FILE_PATH = 'STATE_FILE_PATH'
STATE_OUTPUT_DIR = 'STATE_OUTPUT_DIR'
WORKSTATION_MODE = 'WORKSTATION_MODE'
WORKSTATION_MODE_TIMEOUT = 'WORKSTATION_MODE_TIMEOUT'
WORKSTATION_MODE_DEFAULT_TIMEOUT = 60


# =============================================================================
# process_args
# =============================================================================
def process_args(args: list) -> None:
    command = args[0]
    if command == lib.commands.INIT:
        # get parameters from environment
        terraform_source_dir = os.environ[TERRAFORM_SOURCE_DIR]
        terraform_dir_path = os.environ.get(TERRAFORM_DIR_PATH)
        debug = os.environ.get(DEBUG)
        if debug:
            # convert to bool if specified
            debug = bool(strtobool(debug))
        lib.commands.init(
            terraform_source_dir,
            terraform_dir_path=terraform_dir_path,
            debug=debug)
    elif command == lib.commands.PLAN:
        # get parameters from environment
        terraform_source_dir = os.environ[TERRAFORM_SOURCE_DIR]
        terraform_dir_path = os.environ.get(TERRAFORM_DIR_PATH)
        state_file_path = os.environ.get(STATE_FILE_PATH)
        error_on_no_changes = os.environ.get(ERROR_ON_NO_CHANGES)
        output_var_files = \
            lib.environment.get_tf_output_var_files(os.environ)
        if error_on_no_changes:
            # convert to bool if specified
            error_on_no_changes = bool(strtobool(error_on_no_changes))
        destroy = os.environ.get(DESTROY)
        if destroy:
            # convert to bool if specified
            destroy = bool(strtobool(destroy))
        debug = os.environ.get(DEBUG)
        if debug:
            # convert to bool if specified
            debug = bool(strtobool(debug))
        lib.commands.plan(
            terraform_source_dir,
            terraform_dir_path=terraform_dir_path,
            state_file_path=state_file_path,
            output_var_files=output_var_files,
            error_on_no_changes=error_on_no_changes,
            destroy=destroy,
            debug=debug)
    elif command == lib.commands.APPLY:
        # get parameters from environment
        terraform_source_dir = os.environ[TERRAFORM_SOURCE_DIR]
        terraform_dir_path = os.environ.get(TERRAFORM_DIR_PATH)
        output_var_files = \
            lib.environment.get_tf_output_var_files(os.environ)
        state_file_path = os.environ.get(STATE_FILE_PATH)
        state_output_dir = os.environ.get(STATE_OUTPUT_DIR)
        debug = os.environ.get(DEBUG)
        if debug:
            # convert to bool if specified
            debug = bool(strtobool(debug))
        lib.commands.apply(
            terraform_source_dir,
            terraform_dir_path=terraform_dir_path,
            output_var_files=output_var_files,
            state_file_path=state_file_path,
            state_output_dir=state_output_dir,
            debug=debug)
    elif command == lib.commands.CREATE_PLAN:
        # get parameters from environment
        terraform_source_dir = os.environ[TERRAFORM_SOURCE_DIR]
        archive_output_dir = os.environ[ARCHIVE_OUTPUT_DIR]
        plan_file_path = os.environ.get(PLAN_FILE_PATH)
        terraform_dir_path = os.environ.get(TERRAFORM_DIR_PATH)
        state_file_path = os.environ.get(STATE_FILE_PATH)
        source_ref = os.environ.get(SOURCE_REF)
        source_ref_file = os.environ.get(SOURCE_REF_FILE)
        error_on_no_changes = os.environ.get(ERROR_ON_NO_CHANGES)
        output_var_files = \
            lib.environment.get_tf_output_var_files(os.environ)
        if error_on_no_changes:
            # convert to bool if specified
            error_on_no_changes = bool(strtobool(error_on_no_changes))
        destroy = os.environ.get(DESTROY)
        if destroy:
            # convert to bool if specified
            destroy = bool(strtobool(destroy))
        debug = os.environ.get(DEBUG)
        if debug:
            # convert to bool if specified
            debug = bool(strtobool(debug))
        lib.commands.create_plan(
            terraform_source_dir,
            archive_output_dir,
            plan_file_path=plan_file_path,
            terraform_dir_path=terraform_dir_path,
            state_file_path=state_file_path,
            output_var_files=output_var_files,
            source_ref=source_ref,
            source_ref_file=source_ref_file,
            error_on_no_changes=error_on_no_changes,
            destroy=destroy,
            debug=debug)
    elif command == lib.commands.SHOW_PLAN:
        # get parameters from environment
        archive_input_dir = os.environ[ARCHIVE_INPUT_DIR]
        plan_file_path = os.environ.get(PLAN_FILE_PATH)
        debug = os.environ.get(DEBUG)
        if debug:
            # convert to bool if specified
            debug = bool(strtobool(debug))
        lib.commands.show_plan(
            archive_input_dir,
            plan_file_path=plan_file_path,
            debug=debug)
    elif command == lib.commands.APPLY_PLAN:
        # get parameters from environment
        archive_input_dir = os.environ[ARCHIVE_INPUT_DIR]
        state_output_dir = os.environ.get(STATE_OUTPUT_DIR)
        plan_file_path = os.environ.get(PLAN_FILE_PATH)
        debug = os.environ.get(DEBUG)
        if debug:
            # convert to bool if specified
            debug = bool(strtobool(debug))
        lib.commands.apply_plan(
            archive_input_dir,
            state_output_dir=state_output_dir,
            plan_file_path=plan_file_path,
            debug=debug)
    elif command == lib.commands.OUTPUT:
        # get parameters from environment
        output_dir = os.environ[TERRAFORM_OUTPUT_DIR]
        output_targets = \
            lib.environment.get_tf_output_targets(os.environ)
        state_file_path = os.environ.get(STATE_FILE_PATH)
        debug = os.environ.get(DEBUG)
        if debug:
            # convert to bool if specified
            debug = bool(strtobool(debug))
        lib.commands.output(
            output_dir,
            output_targets=output_targets,
            state_file_path=state_file_path,
            debug=debug)
    else:
        print(f'command not recognized: {command}')
        print(f"available commands: {' '.join(lib.commands.COMMANDS)}")
        raise NotImplementedError


def do_workstation_mode() -> None:
    # check for WORKSTATION_MODE
    workstation_mode = os.environ.get(WORKSTATION_MODE)
    if workstation_mode:
        # convert to bool if specified
        workstation_mode = bool(strtobool(workstation_mode))
    workstation_mode_timeout = os.environ.get(WORKSTATION_MODE_TIMEOUT)
    if workstation_mode_timeout:
        workstation_mode_timeout = int(workstation_mode_timeout)
    else:
        workstation_mode_timeout = WORKSTATION_MODE_DEFAULT_TIMEOUT
    # if WORKSTATION_MODE is enabled
    if workstation_mode:
        def _should_wait(start_time, timeout):
            # get current time
            current_time = datetime.datetime.utcnow()
            # get end time
            end_time = start_time + datetime.timedelta(minutes=timeout)
            # get time delta between the two
            time_remaining = end_time - current_time
            print('[workstation] time remaining: ' +
                  str(time_remaining).split(".")[0])
            return current_time < end_time
        print('[workstation] starting workstation mode')
        print(f'[workstation] timeout: {workstation_mode_timeout} minutes')
        # get start time
        start_time = datetime.datetime.utcnow()
        while _should_wait(start_time, workstation_mode_timeout):
            sleep_time = 30
            print(f'[workstation] sleeping for {sleep_time} seconds...')
            time.sleep(sleep_time)
        print('[workstation] stopping workstation mode')


# =============================================================================
# main
# =============================================================================
def main(args: list) -> None:
    try:
        process_args(args)
    finally:
        do_workstation_mode()


if __name__ == "__main__":
    main(sys.argv[1:])
